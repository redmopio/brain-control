generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Conversation {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  phoneNumber         String   @map("phone_number")
  jid                 String?  @db.VarChar
  context             String?
  conversationBuffer  String?  @map("conversation_buffer")
  conversationSummary String?  @map("conversation_summary")
  userName            String?  @map("user_name")
  tools               Json?    @db.Json

  @@map("conversations")
}

model Agent {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  name         String    @unique(map: "agents_name_idx")
  constitution String
  messages     Message[]

  @@map("agents")
}

model Connector {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  name      String
  groups    Group[]

  @@map("connectors")
}

model Group {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  name        String?  @db.VarChar(255)
  description String?
  connectorId String?  @map("connector_id") @db.Uuid
  realId      String?  @map("real_id")

  connector Connector?   @relation(fields: [connectorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messages  Message[]
  users     UsersGroup[]

  @@map("groups")
}

model Message {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  userId    String?  @map("user_id") @db.Uuid
  role      String?
  content   String?
  parentId  String?  @map("parent_id") @db.Uuid
  agentId   String?  @map("agent_id") @db.Uuid
  groupId   String?  @map("group_id") @db.Uuid

  agent         Agent?    @relation(fields: [agentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  group         Group?    @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentMessage Message?  @relation("messagesTomessages", fields: [parentId], references: [id], onUpdate: NoAction)
  otherMessages Message[] @relation("messagesTomessages")

  @@map("messages")
}

model User {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  phoneNumber String   @map("phone_number")
  jid         String?  @db.VarChar
  telegramId  String?  @map("telegram_id")
  context     String?
  userName    String?  @map("user_name")

  messages Message[]
  groups   UsersGroup[]

  @@map("users")
}

model UsersGroup {
  userId    String   @map("user_id") @db.Uuid
  groupId   String   @map("group_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  group Group @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user  User  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, groupId])
  @@map("users_groups")
}
